0.소프트웨어를 공유하기 이전의 기술 공유 

기술적 정보의 자유로운 공유라는 개념은 컴퓨터가 있기 훨씬 전에 존재했습니다. 예를 들어, 자동차 개발 초기에 한 기업 은 George B. Selden이 처음 제출한 2단 사이클 가솔린 엔진 특허권 을 소유했습니다. 
이 특허를 통제함으로써, 그들은 업계를 독점하고 자동차 제조업체가 그들의 요구를 준수하도록 강요하거나 소송을 제기 할 수 있었습니다. 
1911 년 독립 자동차 회사 인 Henry Ford 는 Selden 특허에 대한 도전을 받았습니다. 그 결과 Selden 특허는 사실상 쓸모없게 되었고 새로운 협회(후일의 자동차 제조업 협회)가 형성되었습니다. 
새로운 협회는 모든 미국 자동차 제조업체 사이의 크로스 라이센스 계약을 제정했습니다. 각 회사는 기술을 개발하고 특허를 출원하더라도 이러한 특허는 공개적으로 공개되었으며 모든 제조업체간에 돈을 교환하지 않았습니다. 
미국이 제 2 차 세계 대전에 진입할 무렵에, 다른 회사의 92 개 특허와 포드 특허가 돈(또는 소송)을 교환하지 않고도 제조업체간에 공유되었습니다.

1.1980 년대 이전의 자유 소프트웨어 
1950 년대와 1960 년대에 거의 모든 소프트웨어는 공동 연구로 일하는 학자 및 기업 연구원에 의해 제작되었으며, 종종 공용 도메인 소프트웨어 로 공유 되었습니다. 
따라서, 그것은 학계의 분야에서 오랫동안 확립된 개방과 협력 의 원칙에 따라 일반적으로 배포되었고, 그 자체로 하나의 필수품으로 보지 못했습니다. 
그러한 공동 행동은 나중에 소위 해킹 문화 (오픈 소스 프로그래머들 사이에 긍정적인 의미가 있는 용어) 의 핵심 요소가 되었습니다. 
현재, 인간이 읽을 수 있는 형태의 소프트웨어 인 소스 코드 는 일반적으로 소프트웨어 기계 코드 와 함께 배포되었습니다. 
왜냐하면 사용자는 수정 없이 다른 하드웨어 나 OS에서 실행되지 않을 것이고 버그를 수정하거나 새로운 기능을 추가하기 때문에 소프트웨어 자체를 자주 수정했기 때문입니다. 
A-2 시스템이 상기 개발 UNIVAC의 1953 년 레밍턴 랜드의 분할을, Ceruzzi, Paul에 공개 된 소스 코드를 가진 고객. UNIVAC에 개선 사항을 다시 보내달라고 요청했습니다. 
나중에 거의 모든 IBM 메인 프레임 소프트웨어 또한 소스 코드와 함께 배포되었습니다. 사용자 그룹의 소프트웨어 교환을 용이하게 하기 위해 SHARE 라고 불리는 IBM 701 과 DECUS 라고 불리는 DEC (Digital Equipment Corporation)의 IBM 701이 형성되었습니다. 
SHARE 운영 체제 원래에 의해 개발된 것은 제너럴 모터스(GM)는 의에 대한 SHARE 배포 한 IBM 709 과 7090 컴퓨터. 일부 대학의 컴퓨터 실은 컴퓨터에 설치된 모든 프로그램에 게시 된 소스 코드 파일이 있어야한다는 정책조차 가지고 있었습니다.

이후 1969년 대륙 횡단 고속 컴퓨터 네트워크 인 ARPANET (Advanced Research Projects Network)가 구축되었습니다. 
네트워크 (후일의 인터넷)는 소프트웨어 코드의 교환을 단순화했습니다. 
또한 TeX (Donald Knuth가 개발) 및 SPICE 와 같이 1970 년대에 개발 된 일부 무료 소프트웨어가 계속 개발되어 사용 되었습니다.

2. 자유 소프트웨어의 초기 하락 
1960 년대 후반에는 운영 체제 및 프로그래밍 언어 컴파일러가 발전하면서 소프트웨어 생산 비용이 하드웨어에 비해 크게 증가했습니다. 
점차 증가하는 소프트웨어 산업은 하드웨어 제조업체의 번들 소프트웨어 제품(번들 제품 비용은 하드웨어 비용에 포함됨)과 경쟁하고 있었고 임대된 컴퓨터는 소프트웨어 지원을 필요로 하면서 소프트웨어는 수익을 내지 못하고 일부 고객은 자신의 요구를 더 잘 충족시킬 수 있었습니다. 
제조업체의 소프트웨어 비용이 하드웨어 제품 비용과 번들되는 것을 원하지 않았다는 점에서 미국 대 IBM 반독점 소송이 1969년 1 월 17일에 제기되었고, 미국 정부는 번들 소프트웨어가 반경쟁적이라고 부과 및 일부 소프트웨어는 무료로 계속 제공되었지만 제한적인 라이센스 하에서만 판매되는 소프트웨어가 점차 증가했습니다.

1970년대 초 AT&T는 유닉스의 초기 버전을 정부 및 학술 연구자에게 무료로 배포했지만 이 버전은 수정된 버전을 재배포하거나 배포 할 수 있는 권한이 없었기 때문에 현대의 의미에서 자유 소프트웨어가 아니었습니다. 
유닉스가 1980 년대 초반에 더 널리 보급된 후 AT&T는 무료 배포를 중단하고 시스템 패치를 부과했으며 다른 아키텍처로 전환하는 것이 매우 어렵기 때문에 대부분의 연구원은 상용 라이센스를 지불했습니다.

1974년 미국 저작물의 새로운 기술적 사용에 관한위원회(CONTU)가 저작자의 원작을 구현하는 범위 내에서 컴퓨터 프로그램이 저작권의 적절한 주제가 되기 전에는 소프트웨어가 저작권으로 간주되지 않았음을 밝혔습니다. 
따라서 소프트웨어에는 라이선스가 첨부되지 않았으며 일반적으로 소스 코드가 있는 공개 도메인 소프트웨어로 공유 되었습니다.
/*CONTU 결정 외에 나중에 법원의 결정에 의해 애플 V. 프랭클린에 대한 1983 년 오브젝트 코드는 컴퓨터 프로그램을 문학 작품의 저작권 상태를 주고 시작된 소프트웨어의 라이선스 및 수축 포장은 소스 폐쇄 소프트웨어 비즈니스 모델을.*/

1970 년대 후반과 1980 년대 초반에 컴퓨터 벤더와 소프트웨어 전용 회사는 소프트웨어 라이센스에 대한 부과를 시작하고 소프트웨어를 "프로그램 제품"으로 마케팅하고 저작권 ,상표 및 임대를 통해 자산으로 간주되는 새로운 소프트웨어 개발에 법적 제한을 가하기 시작했습니다. 
1976 년 빌 게이츠 는 애호가들에게 “공개서한” 이라는 제목의 에세이를 썼는데 그는 애용자가 라이선스 비용을 지불하지 않고 Microsoft의 제품인 Altair BASIC 을 광범위하게 공유하면서 낙담했습니다.
AT&T는 1979 년 Unix 시스템을 판매함으로써 수익을 올릴 수 있다고 결정했을 때 라이선스를 시행하기 시작했습니다. IBM은 1983년 2월 8일자 발표에서 구입 한 소프트웨어로 더 이상 소스를 배포하지 않겠다는 정책을 발표했습니다. 

수익을 높이기 위해 일반적으로 소스 코드(프로그래머가 쉽게 읽을 수 있음)를 배포하지 않고 소스코드 에서 컴파일된 실행 가능 머신코드만 배포하기 시작했습니다. 
이 새로운 관행에 특히 괴로웠던 한 사람은 리처드 스톨만이었습니다. 
그는 처음에는 다른 사람들이 작성한 프로그램을 더 이상 연구하거나 수정할 수 없다고 우려했습니다. 
스톨만은 관행을 윤리적으로 잘못된 것으로 보았다. 그에 대한 응답으로 그는 1983 년에 GNU 프로젝트를 설립하여 사람들이 자유 소프트웨어만을 사용하여 컴퓨터를 사용할 수 있게 했습니다 . 그는 1985년 비영리기구인 FSF(Free Software Foundation)를 설립하여 보다 공식적으로 프로젝트를 조직했으며 그는 또한 카피 레프트를 발명했습니다. 저작권의 대상이 되는 저작물의 "무료"상태를 보존하는 법적 메커니즘을 제공하고 이를 일반 공중 라이선스에 구현 했습니다 . 카피 레프트 라이센스는 저작자가 사용자에게 추가 요금 없이 저작물을 사용할 수 있는 권리와 프로그램의 완전한 소스 코드를 입수하고 연구하고 수정할 수 있는 권한을 포함하여 여러 가지 권리를 부여 할 수 있지만 파생 저작물에는 동일한 라이선스나 라이선스가 없는 저작물이 필요합니다. 파생 상품에는 다른 원본 프로그램과의 조합이 포함되므로 다운 스트림 저작자는 최초 저작물을 독점 소프트웨어로 전환 할 수 없으며 카피 레프트 공유지에 기여하도록 초청받습니다. 나중에 그러한 라이센스의 변형이 다른 사람들에 의해 개발되었습니다.

3. 1980 년대와 1990 년대

3-1 비공식적인 소프트웨어 공유가 계속되다

그러나 여전히 소스 코드를 다른 프로그래머 또는 사용자와 무료로 공유하고 싶어하는 사람들이 있었으며 "취미자" 및 " 해커 "라고 불렀습니다. 
/*이들은 도입과 인터넷의 광범위한 대중을 사용하기 전에, 거기에 몇 가지 다른 방법을 포함하여, 이 작업을 수행할 수 있었습니다. */

SHARE 프로그램 라이브러리 
1955 년에 설립 된 SHARE 사용자 그룹은 무료 소프트웨어를 수집하고 배포하기 시작했습니다. 
SHARE로부터 최초로 배포 된 문서는 1955년 10월 17일에 출판되었습니다. 
"SHARE Program Library Agency"(SPLA)는 정보와 소프트웨어, 특히 자기 테이프를 배포했습니다.

DECUS 테이프 
1980년대 초, 소위 DECUS 테이프는 DEC 장비 사용자를 위한 자유 소프트웨어 전송을 위한 전세계적인 시스템이었습니다. 
운영 체제는 일반적으로 독점 소프트웨어였지만 TECO 편집기, Runoff 텍스트 포맷터 또는 List 파일 목록 유틸리티와 같은 많은 도구 는 사용자의 삶을 더 쉽게 만들고 DECUS 테이프에 배포하기 위해 개발되었습니다. 
이러한 유틸리티 패키지는 DEC의 독점 운영 체제의 새로운 릴리스에 통합하는 데 도움이 되었습니다. 컴파일러조차도 배포 할 수 있었습니다. 예를 들어 Ratfor(및 Ratfiv)는 연구원이 Fortran 코딩에서 구조화 프로그래밍으로 이동하는 것을 도왔습니다(GO TO 문을 억제). 
1981 Decus 테이프는 아마도 사용자가 DEC 16 비트 PDP-11 및 VMS 운영 체제에서 실행중인 32 비트 VAX 에서 유닉스 계열 시스템 을 사용할 수 있게 해주는 Lawrence Berkeley Laboratory 소프트웨어 도구 가상 운영 체제를 도입함으로써 가장 혁신적인 것이었을 것이며 이는 현재 Windows 용 Cygwin 시스템과 유사합니다. 
바이너리와 라이브러리는 종종 배포되었지만 사용자는 일반적으로 소스 코드에서 컴파일하는 것을 선호했습니다.

1980 년대 온라인 소프트웨어 공유 커뮤니티 
80년대에는 자유 소프트웨어 운동과 나란히 소스 코드가 있는 소프트웨어가 BBS 네트워크에서 공유 되었으며 이것은 때로는 필수적으로 요구되었습니다. 
BASIC 및 기타 해석 언어로 작성된 소프트웨어는 소스 코드로만 배포 할 수 있었으며 그 대부분은 프리웨어였습니다. 
사용자가 그러한 소스 코드를 수집하고 수정을 논의하기 위해 특별히 보드를 설정하기 시작했을 때 이것은 사실상의 오픈 소스 시스템이었습니다.

가장 확실한 사례 중 하나는 가장 많이 사용 된 BBS 시스템 및 네트워크 중 하나인 WWIV 입니다. 
처음에는 Wayne Bell이 BASIC에서 개발했습니다. 자신의 소프트웨어를 "modding"하고 mods를 배포하는 문화는 매우 커져서 소프트웨어가 첫 번째 Pascal, 그 다음 C++ 로 포팅되면 등록 된 사용자에게 배포되고 계속해서 mods를 공유하고 자신의 코드를 컴파일합니다. 
/*소프트웨어 버전 다른 많은 BBS 제작자가 공유한 Fidonet 우산 외부에도 불구하고 이것이 지배적 인 시스템 및 네트워크가 되는 데 기여했을 수 있습니다. */

1980년대 초 Usenet과 UUCPNet의 출현으로 인해 프로그래밍 공동체가 더욱 깊어지고 프로그래머가 자신의 소프트웨어를 공유하고 다른 사람들이 작성한 소프트웨어에 기여할 수 있는 더 간단한 방법을 제공하게 되었습니다.

3-2 자유 소프트웨어 운동이 시작되다

리처드 스톨먼은 1983년 GNU 프로젝트를 시작하여 소스 코드의 사용에 제약이 없는 완전한 운영 체제를 작성했습니다. 
이 동기를 유발하게 된 특정 사건이 있었는데 그것은 소스 코드가 사용자로부터 보류되었기 때문에 귀찮은 프린터를 수정할 수 없게 된 것이었습니다. 
스톨먼은 또한 GNU 프로젝트의 목적을 설명하고 자유 소프트웨어의 중요성을 설명하기 위해 1985년에 GNU 선언문을 발표했습니다. 
GNU 프로젝트와 그 선언문에 대한 영감의 또 다른 영원한 이유는 스톨먼과 Symbolics 그리고 Inc 간에 MIT가 MIT 코드를 기반으로 한 Lisp 머신에 대한 Symbolics의 업데이트에 대한 액세스에 대한 의견 차이였습니다. 
출시된 지 얼마 되지 않아 그는 "자유 소프트웨어" 및 설립 자유 소프트웨어 재단이라는 개념을 촉진 할 수 있었으며 자유 소프트웨어에 관한 정의는 1986년 2월에 출판되었습니다.

1989년에 GNU 일반 공중 사용 허가서의 첫 번째 판이 출판되었고 약간 업데이트 된 버전 2가 1991년에 출판되었으며 1989년에 일부 GNU 개발자가 Cygnus Solutions 사를 설립했습니다. 

3-3 리눅스의 이야기 (1991~) 

리눅스 커널 에 의해 시작되었으며, 지금까지는 GNU 프로젝트의 커널이 없었기 때문에 완전한 자유 소프트웨어 운영 체제가 존재하지 않았으며 토발즈의 커널 개발로 마지막 격차가 좁혀졌습니다. 
거의 완성된 GNU 운영 체제 와 리눅스 커널 의 결합은 최초의 완전한 자유 소프트웨어 운영 체제를 만들었습니다.

데비안 GNU - 리눅스 에 의해 시작되었습니다. 
            데비안 개발자의 원칙은 데비안 사회 계약 에서 표현되는데 처음 시작된 이래로 데비안 프로젝트는 FSF와 긴밀하게 연결되어 있으며 1994-1995 년에 FSF가 후원했습니다. 
            1997년 전직 데비안 프로젝트 리더인 Bruce Perens 는 다양한 자유 소프트웨어 프로젝트를 위한 비영리 기금 및 지원 기관인 Public Interest 에서 Software를 찾았습니다. 

1996년 이래로 리눅스 커널은 독점적인 라이선스 구성 요소를 포함하고 있어 더 이상 완전한 자유소프트웨어가 아니었습니다. 
따라서 자유 소프트웨어 재단에서 2008 년 불리는 리눅스 커널의 수정 된 버전이 출시되었습니다.
많은 기업들이 상용 Linux 기반 제품 또는 배포판을 상용 지원하며 명명은 논쟁의 여지가 남아있습니다. 
전체 시스템을 단순히 "Linux"로 언급하는 것은 일반적인 사용법이나 자유 소프트웨어 재단 그리고 많은 다른 사람들은 전체 운영 체제에 대해 보다 정확한 이름을 말하는 용어 "GNU / 리눅스"의 사용을 옹호합니다.

3-4 무료 BSD의 이야기 (1993~) 
1993년에 USL 대 BSDi 소송이 법정에서 해결 되었을 때, FreeBSD 와 NetBSD는 자유 소프트웨어로 배포되었습니다. 
1995년 오픈 BSD는 포크 NetBSD에서, 그리고 2004년 FreeBSD에서 Dragonfly BSD가 나왔습니다.

3-5 오픈 소스의 출시 
1997년, 에릭 레이먼드가 성당과 시장, 그리고 해커 커뮤니티와 무료 소프트웨어 원칙의 반사 분석을 하였습니다.
그리고 이는 1998년 초에 주목을 받았으며 Netscape Communications Corporation이 인기있는 Netscape Communicator 인터넷 제품군을 무료 소프트웨어 로 출시하도록 유도하는 한 가지 요소였습니다.

넷스케이프의 행동은 레이몬드와 다른 사람들이 자유 소프트웨어 원칙과 이점을 상용 소프트웨어 산업에 가져 오는 방법을 조사하게 했는데 그들은 FSF의 사회 활동가가 넷스케이프와 같은 회사에 호소력이 없다고 결론을 내리고 소스 코드 공유의 비즈니스 잠재력을 강조하기 위해 자유 소프트웨어 운동을 재편성하는 방법을 모색했습니다.

1998년 1월 네비게이터용 소스 코드 공개에 대한 넷스케이프의 발표에 대한 반응으로 캘리포니아 전략 세션에서 자유 소프트웨어 운동의 일부 사람들은 "오픈 소스"라는 레이블을 채택 했습니다. 
세션의 개인 그룹에는 "오픈 소스", Todd Anderson, Larry Augustin , Jon Hall , Sam Ockman, Michael Tiemann 및 Eric S. Raymond가 제안한 Christine Peterson이 포함 되었습니다. 
다음 주가 되자 레이몬드 (Raymond)와 다른 사람들은 그 단어를 퍼뜨리는 일을 하였으며 리누스 토발즈는 다음날 모든 중요한 제재를 가했습니다. 
Phil Hughes는 Linux Journal에서 강단을 제안하였고 자유 소프트웨어 운동의 개척자인 리차드 스톨만은 이 용어를 채택하면서 마음이 바뀌었습니다. 
이 용어를 채택한 사람들은 네비게이터의 소스 코드가 공개되기 전에 "자유 소프트웨어"라는 이데올로기적이고 대결적인 의미를 벗어날 수 있는 기회를 이용했습니다. 
넷스케이프는 Netscape Public License 및 Mozilla Public License에 따라 소스 코드를 발표했습니다.

이 용어는 기술 출판사 Tim O'Reilly가 1998 년 4 월에 조직한 행사에서 큰 호응을 얻었습니다. 
원래 "프리웨어 정상 회의"라는 제목 나중에 "오픈 소스 정상 회의 '라는 이름의 이벤트와 함께 리누스 토발즈 (Linus Torvalds)를 포함하여 가장 중요한 자유 및 오픈 소스 프로젝트의 많은 지도자들이 참석하였습니다. 
그 모임에서 자유 소프트웨어라는 이름으로 인한 혼란이 제기되었습니다. 
Tiemann은 "소스웨어"를 새로운 용어로, Raymond는 "오픈 소스"를 주장했으며 조립된 개발자들은 표를 얻었고 그날 저녁 기자 회견에서 승자가 발표되었습니다. 
5일 후, 레이몬드 (Raymond)는 자유 소프트웨어 공동체에게 새로운 용어를 채택할 첫 번째 공개 전화를 하였습니다. 
오픈 소스 이니셔티브 직후 형성 하였다. 
OSI 리차드 스톨만에 따르면 처음에는 오픈 소스 용어를 채택하는 아이디어에 흔들렸다고 합니다. 

2000년 10월 13일, Sun Microsystems 는 GNU Lesser General Public License 하에서 StarSuite 오피스 스위트를 무료 소프트웨어로 발표했으며, 자유 소프트웨어 버전은 OpenOffice.org 로 이름이 바뀌었고 StarOffice와 공존했습니다.

1990년대 말, "오픈 소스"라는 용어는 대중 매체에서 큰 인기를 얻었으며, 닷컴 업계의 거품 과 오픈 소스 소프트웨어가 주도하는 Web 2.0 이라는 맥락에서 소프트웨어 산업에서의 인정을 얻었습니다 .

4. Microsoft 등의 공격

4-1 오픈 소스에 대한 Microsoft의 기여 
2006년 Microsoft는 Microsoft 플랫폼을 대상으로 하는 오픈 소스 개발자를 위한 호스팅을 제공하기 위해 CodePlex 오픈 소스 코드 호스팅 사이트를 시작했습니다. 
/*2009년 7월 마이크로 소프트도 오픈 일부 소스 의 Hyper-V 그들에 의해 그렇게 하도록 요구했기 때문에, 리눅스 커널에 패치를 -supporting를 GNU 일반 공중 사용 허가서, 와 주류 커널에 기여. Hyper-V 자체는 오픈 소스가 아닙니다.*/ 
2002 년에 만들어진 Microsoft의 F # 컴파일러도 Apache 라이선스에 따라 오픈 소스로 릴리스되었습니다. 
F # 컴파일러는 오픈 소스가 아닌 Microsoft Visual Studio 에 통합되어 상용 제품 입니다.

Microsoft 담당자는 수년 동안 다양한 오픈 소스 및 Linux 컨퍼런스에서 정기적으로 출연했습니다.

2012년 Microsoft는 오픈 소스 표준을 통해 독점적인 Microsoft 기술과 타사 기술 간의 격차를 해소하기 위해 Microsoft Open Technologies Inc.라는 자회사를 설립했습니다. 
이 자회사는 이후 오픈 소스 및 비 Windows 플랫폼에 대한 Microsoft의 입장이 유리해짐에 따라 Microsoft로 다시 포개졌습니다.
2016년 1월, Microsoft는 MIT 라이센스 하에 Chakra를 오픈 소스로 출시했으며 이 코드는 GitHub에서 사용할 수 있습니다.

4-2 SCO v. IBM 및 관련 나쁜 홍보 (2003-) 

2003년 독점적인 유닉스 공급 업체이자 이전의 리눅스 배포 업체인 SCO는 유닉스 지적 재산권이 리눅스 커널에 부적절하게 복사되었다고 주장하면서 IBM에게 책임을 묻는다고 주장하며 IBM을 고소했습니다. 
몇몇 관련 소송 및 반박이 뒤따랐는데, 일부는 SCO에서 비롯되었으며 일부는 SCO에서 소송을 제기했습니다. 
그러나 SCO의 주장은 특이성이 결여되었고, 언론 매체의 일부는 신빙성 있는 것으로 보고했지만 SCO의 많은 비판자들은 이와 같은 주장이 매우 의심스럽다고 생각했습니다.

SCO는 IBM 대 SCO 및 기타 여러 재판에서 패배한 후 2007 년 11 장 파산 신청을 했습니다. 
그러나 SCO가 저작권을 소유하지 않았음을 발견 했음에도 불구하고 SCO의 소송 - 행복한 CEO Darl McBride는 더 이상 회사를 운영하지 않고 SCO와 파산을 담당하는 파산 관재인은 SCO 대 IBM 소송에서 관련이 있다고 주장하는 일부 부분을 계속 보도하기로 결정했습니다. 
그는 SCO의 주 법률 회사인 IBM과 IBM의 계약이 체결된 지 얼마 안 되는 고정 된 금액으로 SCO를 대표하기로 계약을 체결했기 때문에 분명히이를 감당할 수 있었습니다.

2004년 알렉시스 드 토크 빌 기관(ADTI) 은 오픈 소스 코드의 '출처'에 관한 Samizdat와 다른 이슈를 발표하면서 리눅스 커널이 유닉스에서 도난당한 코드를 기반으로 한다는 사실을 발표했습니다.
 /*리누스 토발즈가 리눅스 커널만큼 정교한 것을 만들 수 있다고 믿을 수 없다는 주장.*/ 이 책은 사람들이 책을 위해 인터뷰 한 사람들을 포함하여 광범위하게 비난 받아 조롱당한 이후에는 결코 출판되지 않고 맙니다. 
 일부 사람들은 인터뷰를 하지 않았으며, ADTI는 리누스 토발즈에게 연락을 시도하지 않았거나 응답을 하기 위해 그에게 주장을 제기하지 않았음을 알게되었습니다. 
 /*마이크로소프트(?)이 사고로 인해 "주의 산만"이라고 묘사하는 선을 그으려고 시도했습니다.*/

많은 사람들은 Linux 커널에 대한 이러한 법적 및 공포, 불확실성 및 의심(FUD) 공격의 일부 또는 전부가 Microsoft에 의해 은밀하게 처리 된 것으로 의심되는 것으로 나타났습니다. 
그러나 ADTI와 SCO는 모두 Microsoft로부터 자금을 지원 받았습니다.

4-3 ISO OOXML 논쟁 (2008-) 

2008 년 국제 표준화기구는 Microsoft의 Office Open XML을 국제 표준으로 발표했습니다.
이 표준 은 법률 및 정책에 따라 개방형 표준 을 사용해야하는 프로젝트에 Microsoft Office 를 사용할 수 있다는 것을 의미 합니다. 
프로세스 자체에 관련된 ISO 국가위원회의 일부 구성원을 포함하여 표준화 프로세스 비평가는 프로세스의 불규칙성 및 절차상의 위반을 주장하고 문서화되지 않은 Microsoft Office 동작을 참조하기 때문에 ISO가 OOXML을 표준으로 승인하면 안 된다고 주장 했습니다.

2012년 현재 OOXML에 대한 올바른 오픈 소스 구현이 존재하지 않으므로 OOXML 구현 및 지정이 어렵다는 비평가들의 발언을 입증합니다. 
현재 Google은 Office 문서를 자체 독점 Google 문서 형식으로 올바르게 변환 할 수 없습니다. 
이는 OOXML이 진정한 개방형 표준이 아니라 Microsoft Office의 기능을 설명하고 일부 파일 형식만을 포함하는 부분적인 문서임을 의미합니다.

5. 오픈 소스 및 프로그래밍 언어 

1990년대 이래로 오픈 소스 컴파일러 또는 인터프리터 형태의 새로운 프로그래밍 언어가 예외적 인 것이 아니라 표준이 되었습니다. 1991년의 Python , 1995년의 Ruby , 2003년의 Scala 등이 그 예시입니다. 최근에는 Java ,ActionScript ,C # 및 Apple의 Swift가있었습니다. 부분적으로 호환 가능한 오픈 소스 구현이 대부분 개발되었으며 자바의 경우 주요 오픈 소스 구현은 현재 상업용 버전과 매우 비슷합니다.

5-1 자바 

Java 런타임의 Java 소스 코드 부분은 무료로 다운로드 할 수 있음에도 불구하고 "기밀"기반으로 Java Development Kit (JDK) 에 포함되었지만 1996 년 첫 공개 이후 Java 플랫폼 은 오픈 소스가 아니었습니다. 
대부분의 국가에서 일반 대중이 Sun은 나중에이 공개 소스 코드를 공개하여 Java Runtime Environment의 전체 소스 코드를 포함하는 별도의 프로그램을 통해 공용 멤버에게 공개하고 나중에 Java 컴파일러 javac 의 소스도 사용할 수 있게 했습니다. 
Sun은 또한 JDK 소스 코드를 Blackdown Java에 기밀로 제공했습니다. 
프로젝트는 JDK의 초기 버전을 Linux로 이식하거나 Sun의 Linux 포트 인 JDK를 개선 한 자원 봉사자 모임이나 모든 경우에 Sun의 허락없이 수정 및 재배포가 금지되었기 때문에 이 중 누구도 오픈 소스가 아닙니다. 
썬은 자바 플랫폼 포기 방지에 관심을 표명 한 바가 있습니다.

그러나 Java 플랫폼에 대한 몇 가지 독립적 인 부분 재 구현이 만들어졌으며 그 중 대부분은 Java용 GNU Compiler (GCJ)와 같은 오픈 소스 커뮤니티에 의해 작성되었습니다. 
썬은 공개 소스 복제 프로젝트 에 대한 소송을 제기하지 않았습니다. 
GCJ는 특히 Java 구현시 GCJ를 출하 한 Fedora 와 Ubuntu 와 같은 배포판을 지원하는 자유 소프트웨어에서 Java에 대한 나쁜 사용자 경험을 유발했습니다 . 
GCJ를 Sun JDK로 대체하는 방법은 사용자가 자주 묻는 질문이었습니다. 
왜냐하면 GCJ는 불완전한 구현이었기 때문에 호환되지 않고 버그가 있었기 때문입니다

2006년 조나단 슈왈츠 (Jonathan I. Schwartz)는 썬 마이크로 시스템즈 (Sun Microsystems)의 CEO가되었고 오픈 소스에 대한 헌신을 표명했습니다. 
2007년 5월 8일, Sun Microsystems 는 GNU General Public License에 의거하여 Java Development Kit을 OpenJDK로 발표했습니다. 
클래스 라이브러리의 일부(4%)는 다른 당사자의 라이센스로 인해 오픈 소스로 공개 될 수 없으며 바이너리 플러그로 포함되었습니다. 
이 때문에, 2007년 6월, 레드햇은 출시 IcedTea을 의 등가물로 계루 구성 요소를 해결하기 위해 GNU 클래스 패스를이행. 릴리스 이후로 대부분의 문제는 해결되어 오디오 엔진 코드 및 색상 관리 시스템만 남게 되었습니다. 
후자는 Little CMS를 사용하여 해결되기 됩니다.


6. 분산 버전 제어 (2001-) 

최초의 오픈 소스 분산 개정 관리 시스템 (DVCS)은 2001 년에 'tla'(GNU arch 로 이름을 바꾼 이후)였습니다. 
그러나 Bazaar가 여전히 계속 사용되고 Canonical에 의해 사용 되더라도 , 그것과 그것의 후계자 'baz'와 'bzr'( Bazaar )는 결코 인기가 없었으며, GNU 아치는 중단되게 됩니다.
그러나 다른 DVCS 프로젝트가 생겨나 고 일부는 상당한 채택을 시작했습니다.

6-1 깃의 이야기 (2005-) 

그 이후로 가장 인기 있는 DVCS가 된 Git 은 2005년에 만들어졌습니다. 
창작의 이야기는 특이한 것입니다. 일부 리눅스 커널 개발자는 비트 커퍼( BitKeeper )라는 독점적인 DVCS , 특히 리눅스 창시자 인 리누스 토발즈와 같은 독점적 인 DVCS를 사용하기 시작했습니다. 
앤드류 트리 젤은 리눅스 커널 개발이 독점 소프트웨어에 의한 사용과 관련된 "이상한 상황"상업용 버전과 동일한 기능을 제공 할 수있는 오픈 소스 도구를 제작하기 위해 BitKeeper를 리버스 엔지니어링했습니다. 
BitKeeper를 개발 한 회사 인 BitMover는 2005 년에 특정 커널 개발자에게 부여한 무료 라이센스를 취소했습니다.

리누스 토발즈는 BitKeeper 라이센스를 제거한 결과, git이라는 자체 DVCS를 작성하기로 결정했습니다. 
기존의 오픈 소스 DVCS가 커널 유지 관리자로서 자신의 특별한 요구에 적합하다고 생각하지 않았기 때문입니다. 
많은 다른 개발자들이 신속하게 뛰어 들어 도움을 주었고, 시간이 지남에 따라 비교적 단순한 "어리석은 콘텐츠 추적기에서 오늘날의 정교하고 강력한 DVCS로 성장했습니다. 
토발즈는 더 이상 자식을 유지하지 않으며 그것은 Junio ​​Hamano 에 의해 오랫동안 유지되어 왔고 , 많은 개발자로부터 계속해서 기여를 받고 있습니다.

git과 같은 오픈 소스 DVCS의 인기가 높아지고 나중에 DVCS 호스팅 사이트 (가장 인기있는 GitHub (2008 년 설립))가 자유 소프트웨어 프로젝트 참여의 장벽을 점차 축소했습니다. 
GitHub과 같은 사이트에서는 더 이상 잠재적 인 기여자가 소스 코드 저장소 (각 웹 사이트의 다른 위치에 있거나, README 파일이나 개발자 문서에 가끔 넣어 둘 수 있음)의 URL을 찾아야하거나, 패치를 생성하는 방법을 알아 내고, 필요한 경우 올바른 메일 링리스트에 가입하여 패치 전자 메일을 올바른 사람들에게 전달할 수 있습니다. 
기여자는 한 번의 클릭으로 저장소의 사본을 포크 로 만들고 해당 지점 에서 끌어 오기 요청을 발행 할 수 있습니다그들의 변화가 준비되면. GitHub는 오픈 소스 소프트웨어를 위한 세계에서 가장 인기있 는 호스팅 사이트가 되었으며, 이는 포크의 용이성 및 포크의 가시성과 함께 기여자가 크고 작은 변화를 창출 할 수있 는 인기 있는 방법이 되었습니다.

7. 최근 개발 
자유 소프트웨어 재단은 특허권과 DMCA에 대한 법적 문제에 대응 하여 DMCA의 디지털 저작권 관리 (DRM) 조항과 특허권 을 명시적으로 다루는 2007년 GNU Public License 버전 3을 발표 했습니다.
개발 이후에는 GNU GPL v3을 , 같은과 GNU 시스템의 많은 조각의 저작권자로서 GNU 컴파일러 컬렉션 (GCC) 소프트웨어, 자유 소프트웨어 재단은 최근에 업데이트된 GPLv2에에서 GPL v3을에 GNU 프로그램 '라이센스를. GCC의 사용자 인 Apple 과 DRM과 특허를 많이 사용하는 사용자는 Xcode IDE 의 컴파일러를 GCC 에서 다른 FOSS 컴파일러 인 Clang 으로 전환하기로 결정 했으나, 허용 라이센스에 의거합니다. 
LWN 은 부분적으로 GPLv3을 피하려는 욕구에 의해 애플이 동기 부여를 받았다고 추측했으며 삼바프로젝트는 또한 GPLv3으로 바뀌었다. 
애플은 소프트웨어 스위트에서 폐쇄 형 소스 독점 소프트웨어 대안으로 교체합니다.

최근의 합병은 주요 오픈 소스 소프트웨어에 영향을 미쳤는데, Sun는 2008 년에 인기 있는 오픈 소스 MySQL 데이터베이스의 소유자 인 MySQL AB를 인수했습니다.
오라클은 2010년 1월 썬을 인수하여 저작권, 특허 및 상표권을 획득했습니다. 
이로 인해 오라클은 가장 인기 있는 독점적 데이터베이스와 가장 유명한 오픈 소스 데이터베이스 (MySQL)의 소유자가 되었습니다. 
오픈 소스 MySQL 데이터베이스를 상용화하려는 오라클의 시도는 OSS 커뮤니티에 우려를 제기했는데 부분적으로 MySQL의 미래에 대한 불확실성에 대응하여 OSS 커뮤니티는 프로젝트를 오라클의 통제 범위를 벗어난 새로운 데이터베이스 시스템으로 전환했습니다. 
여기에는 MariaDB, Percona 및 Drizzle이 포함됩니다. 
이들 모두에는 별개의 이름이 있습니다. 그들은 별개의 프로젝트이며 상표 등록 된 이름 MySQL을 사용할 수 없습니다

7-1 안드로이드에 관한 이야기 (2008-) 

2008년 9월, Google은 새로운 스마트 폰 운영체제인 Android의 첫 번째 버전을 오픈 소스로 출시했습니다. 
Android에서 번들로 제공되는 일부 Google 애플리케이션은 오픈 소스가 아니었는데 초기 운영체제는 Google에 의해 무료로 배포되었으며 많은 핸드셋 제조업체에서 열심히 채택되었습니다. 
구글은 나중에 모토로라 모빌리티를 인수하여 자체 " 바닐라 (vanilla) "안드로이드 폰과 태블릿을 생산하면서 다른 제조업체들도 안드로이드를 계속 사용할 수 있게 하였습니다. 
안드로이드는 리눅스 커널을 기반으로 하므로, 이 리눅스 (안드로이드를 통해) 모두 모바일 플랫폼에 지배적인 커널이 지금 있다는 것을 의미합니다.


ITworld에 적힌 오픈소스의 내용

20년 전만 하더라도, 오픈소스는 그저 학술적인 것으로만 남아있을 것처럼 보였던 지극히 주변적이고 급진적인 개념이었습니다.
자유 소프트웨어 운동의 뿌리- 자유 소프트웨어(Free Software) 운동은 35년 전 리처드 스톨만에 의해 시작되었습니다. 
OSI(Open Source Initiative)의 공동 설립자인 브루스 페렌스는 “기존에 있던 자유 소프트웨어 개념을 기업에 홍보하고 또 라이선스를 인증하기 위해 오픈소스가 이 운동에 적합한 이름이라고 여겼다”라고 설명했습니다.

1. 넷스케이프 내비게이터와 모질라 출범- 1998년, 넷스케이프는 넷스케이프 내비게이터의 개방형 개발을 스스로 주도하지 않고 흘러가는 대로 내버려두었는데 이것이 모질라 프로젝트로 이어졌습니다. 
이념적인 접근보다는 실용적인 목적이 있다면 많은 기업이 자유 소프트웨어를 도입한다는 것이 분명해짐이 드러난 것입니다.

2. 오픈소스라는 용어의 등장- ‘오픈소스’라는 용어가 처음 소프트웨어에 적용된 것은 1998년 2월 3일 미국 캘리포니아 마운틴 뷰의 VA 리눅스 시스템즈 사무실에서 열린 전략 회의에서였습니다. 
오픈소스라는 용어 자체는 포어인사이트 인스티튜트(Foresight Institute)의 사장 크리스틴 페터슨이 만들었는데 포어인사이트는 나노기술에 중점을 둔 싱크탱크 조직이었습니다. 

3. OSI의 통제와 관리- OSI는 1998년 2월말 새로 등장한 오픈소스의 집사 역할을 위해 설립됐습니다. 
에릭 레이몬드가 초대 사장을 맡았고, 브루스 페렌스는 부사장을, 그리고 초대 이사회에는 브라이언 베렌도르프, 이안 머독, 러스 넬슨, 칩 살젠버그가 참여했으며, OSI 로고는 콜린 비브록이 만들었는데, O는 개방성을, 열쇠구멍은 소스코드의 잠금 해제를 암시합니다.

4. 오픈소스 소프트웨어 라이선스의 탄생- 1999년 데비안 프리 소프트웨어 지침(Debian Free Software Guideline)의 작성자인 브루스 페렌스는 이 지침을 소프트웨어 라이선스가 어떻게 오픈소스로 인식될 수 있는지에 대한 객관적인 정의로 개작했는데 그것이 바로 OSD(Open Source Definition)입니다.

5. 오픈소스 라이선스의 과잉 증식- 2000년대 중반, 오픈소스에 대한 인기가 높아지면서 라이선스의 무분별한 확산이 문제가 됐는데 2004~2006년 기간에 OSI는 이 문제를 처리하기 위해 공공 의견 수렴 과정을 진행합니다.

6. 자바의 오픈소스화, 새로운 주류 시대 개막- 2004년 리처드 스톨만이 ‘자바의 함정’이란 글을 통해 그 단점을 지적했지만, 자바 플랫폼은 2006년 오픈소스화되고 맙니다.
OSI 산하 단체의 등장- 2000년대 말 너무나 많은 오픈소스 비영리단체가 생겨나자 OSI는 산하 단체 모델로 전환하고 개인 회원제도도 도입해 새로운 이니셔티브를 가능하게 합니다.

7. 마이크로소프트와 오픈소스의 대립 중단- 새로운 경영진과 클라우드 솔루션 구축에서 오픈소스를 피할 수 없게 된 마이크로소프트는 오픈소스에 대한 공개적인 적대감 표현을 중단했으나,임베디드 리눅스에 대한 특허 소송은 계속하고 있는 중입니다.

8. 빅스택 오픈소스가 표준- 지금은 빅스택(Big Stack) 오픈소스의 시대이며, 모든 클라우드 플랫폼의 모든 구성요소를 추적해 보면, 오픈소스의 기부나 컨소시엄에서 나온 것입니다.
오픈소스 20주년- 오늘날 새로운 이니셔티브는 바로 오픈소스로 가게 됩니다. 오픈소스는 불과 20년만에 위협에서 기회로, 암적인 존재에서 기념비적인 존재로, 파생 기술에서 혁신으로 바뀌었습니다.

사이언스타임즈 내용 

1. 저작권 도입, 소프트웨어의 장막 -
1960년대 말 이전까지도 소프트웨어는 하드웨어와 함께 제공되는 것으로 여겨지고 있었습니다. 
왜냐하면 아직 미분화된 상태였으며 오히려 코드를 무료로 배포하는 경향도 있었는데 그 이유는 소스가 오픈되어야만 컴퓨터 기능이 향상되고, 그래야 더 많은 판매가 이루어질 수 있어서였습니다.
벨연구소의 캔톰슨와 데니스리치가 만든 유닉스도 이런 자유스러운 분위기에서 탄생됐습니다.
특정한 하드웨어에 종속되지 않는 하나의 운영체제계로 저렴한 컴퓨터에 맞게 만들어졌으며 소스코드도 함께 배포됐습니다. 
이후 많은 사람들이 많이 고치고 수정해서 기능을 향상시켜 사용해 나가기 시작했으며 그 결과 버클리에서는 유닉스를 수정해서 BSD를 배포하기도 합니다.

1970년대 들어서면서 분위기가 바뀌기 시작했는데 소프트웨어 기술 발전과 더불어 개발 비용이 들어가면서 소프트웨어 상품 시장이 등장했기 때문입니다. IBM이 하드웨어에서 소프트웨어를 분리하는 언번들링(unbundling) 정책도 한몫을 합니다. 
70년대 말 이후 개인용 컴퓨터 발전과 보급이 소프트웨어 상품 시장이 폭발적으로 성장하면서 소프트웨어는 더 이상 자유롭지 못하게 되고 맙니다.
특히 1980년 초중반에 생긴 두 가지 사건은 소프트웨어에 대한 장막을 치는 결정적 계기가 되었는데 그중 하나는 소프트웨어에 대한 저작권 적용입니다. 
일본에서 처음 시작됐는데, 이후 IBM 등이 이 저작권법을 이용해 소프트웨어에 대한 자유로운 이용을 금지시켰습니다. 
유닉스의 사유화도 더 이상 자유 소프트웨어를 사용할 수 없다는 사실을 인지시켜준 사건입니다. 
벨연구소는 반독점법을 적용받던 통신사 AT&T 산하에 있어서 1982년 그 법이 해제되기 전까지는 자유로울 수 있었지만 법이 해제되자 컴퓨터 사업에 진출하면서 유닉스의 소유권을 주장하면서 많은 소송을 제기하게 되어버립니다.

2. 정보 공유 운동의 뿌리, 그누(GNU) 선언 -
이 모습을 보면서 참여 프로그래머들은 상실과 분노를 느꼈으며 이는 자유소프트웨어 운동 혹은 카피레프트운동으로 이어졌습니다. 
MIT 인공지능 컴퓨터 해커였던 리차드 스톨만은 “소프트웨어는 자유로워야 한다”며 1984년 그누 선언(GNU)을 한 것도 이런 이유에서였습니다. 
그누는 유닉스 운영 체계(OS) 호환 컴퓨터 프로그램의 총칭입니다. 
그누 소프트웨어라고 하며, 이의 개발 프로젝트를 그누 또는 그누 프로젝트라고 합니다. 
소프트웨어 저작권 체제에 반대, 소스 코드에 대한 공중접근을 주창한 것이라고 할 수 있으며 정보공유 운동의 뿌리라고도 볼 수 있습니다.
그누 소프트웨어는 일반 공중 라이선스(GPL)라는 협약에 의해 배포되었습니다. 
협약에 따라 그누 소프트웨어의 복사본을 가지고 있는 사람은 누구든지 그것을 다른 사람에게 같은 조건으로 재배포하는 것을 제한하지 못하며 상업적 이용 금지 조항도 없다, 또한 개작을 하더라도 동일한 이용 허락이 이루어져야 합니다. 
만약 GPL을 어기면 위법이 되도록 만들었습니다. 저작권이 대안이지만 저작권을 타고 움직이고 있다고 볼 수 있는 것입니다. 
리차드 스톨만이 “자유소프트웨어의 자유는 공짜 맥주가 아니라 언론의 자유다”라고 말한 것도 바로 이런 맥락에서 이해할 수 있습니다.
이런 분위기가 확산되면서 자유소프트웨어 운동은 리눅스의 탄생과 월드와이드웹(www) 등의 성공으로 이어졌습니다. 
에릭 레이몬든은 1998년 ‘성당과 시장’이라는 책에서 “리눅스 공동체는 서로 다른 의견과 접근 방법이 난무하는 매우 소란스러운 시장”이라고 표현하기도 했습니다. 

3. GPL에 대한 반기, 오픈소스 -
하지만 1998년 자유소프트웨어에 대한 새로운 조짐이 보이기 시작했다. 
‘OSI 오픈 소스 이니시에티브’(Open Source initiative)가 그것입니다. 
자유 소프트웨어의 정치적 이데올로기를 걷어내고 열린 소프트웨어 개발에 대한 기업들의 투자를 이끌어내기 위해서입니다. 
GPL의 너무나 가혹한 라이센스는 개발자와 그것을 이용하려는 기업들이 오픈 소스 소프트웨어가 상업용 소프트웨어보다 더 우수함에도 불구하고 이를 이용하기 꺼리게 만들게 한다는 생각이 확산되면서였습니다. 
이런 새로운 분위기 속에서 넷스케이프사는 소스 코드를 공개 발표했고, IBM은 아파치 웹서버와 그누/리눅스 투자를 하기도 했습니다. 
거기다 썬, 오라클, 컴팩, 델, 휴렛패컫, 인텔 등도 오픈소스 소프트웨어 지원을 위해 투자가 이루어지기 시작합니다.
구글을 예로 들어보면, 그누/리눅스 기반으로 만들어진 구글은 모든 소스를 오픈하며 이 모든 것이 공짜이나 거기에는 함정이 있습니다. 
그 오픈 소스를 통해 그들은 쉽게 개인의 정보를 빼내 상품화하고 있는 것입니다. 

출처 - 위키피디아,ITworldKorea,scirencetimes
(https://en.wikipedia.org/wiki/History_of_free_and_open-source_software) - 일부 수정 및 편집함
(http://www.itworld.co.kr/print/108114-일부 수정 및 편진함)
(https://www.sciencetimes.co.kr/?news=%EC%9E%90%EC%9C%A0%C2%B7%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%ED%95%B4%ED%82%B9-%EC%97%AD%EC%82%AC - 일부 수정 및 편집함)